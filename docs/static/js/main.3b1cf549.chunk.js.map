{"version":3,"sources":["GifExpertApp/Components/AddCategory.js","GifExpertApp/Components/Footer.js","GifExpertApp/Components/GridItem.js","GifExpertApp/Helpers/getGifs.js","GifExpertApp/Containers/GifGrid.js","Hooks/useFetchGifs.js","GifExpertApp/GifExpertApp.js","index.js"],"names":["AddCategory","setQuery","query","useState","inputValue","setInputValue","isInvalid","setIsInvalid","isNotEmpty","setIsNotEmpty","useEffect","className","onSubmit","e","preventDefault","trim","length","localStorage","setItem","target","firstChild","blur","type","value","onChange","data","placeholder","onClick","Footer","href","rel","GridItem","title","url","src","alt","getGifs","category","a","encodeURI","fetch","res","json","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","then","imgs","useFetchGifs","param","class","GifExpertApp","getItem","q","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b1cf549.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { IoSearch } from 'react-icons/io5';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setQuery, query }) => {\r\n\r\n  const [inputValue, setInputValue] = useState(query);\r\n  const [isInvalid, setIsInvalid] = useState(false);\r\n  const [isNotEmpty, setIsNotEmpty] = useState( !!query ? true : false );\r\n\r\n  useEffect(() => {\r\n    setInputValue(query);\r\n    setIsNotEmpty( !!query ? true : false );\r\n  }, [ query ])\r\n\r\n  const handleChange = (e) => {\r\n    let data = e.target.value.trim();\r\n    setInputValue(data);\r\n    if(data.length > 0) {\r\n      setIsNotEmpty( true );\r\n    }else{\r\n      setIsNotEmpty( false );\r\n    }\r\n  };\r\n\r\n  const emptyInput = () => {\r\n    setInputValue('');\r\n    setIsInvalid(false);\r\n    setIsNotEmpty( false );\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 0) {\r\n      setQuery(inputValue.trim());\r\n      localStorage.setItem(\"query\", inputValue.trim());\r\n      setIsInvalid(false);\r\n      e.target.firstChild.firstChild.blur()\r\n    } else {\r\n      setIsInvalid(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <div className=\"form__input_group\">\r\n        <input\r\n          className={!isInvalid ? \"form__input\" : \"form__input invalid\"}\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleChange}\r\n          placeholder=\"Escribe algo\"\r\n        />\r\n        {isNotEmpty  && <button type=\"button\" onClick={ emptyInput }> X </button> }\r\n      </div>\r\n      <button type=\"submit\" > <IoSearch /> </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setQuery: PropTypes.func.isRequired,\r\n  query: PropTypes.string.isRequired,\r\n};\r\n","export const Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p className=\"footer__copy\">\r\n        Gifs desde{\" \"}\r\n        <a\r\n          className=\"footer__link\"\r\n          href=\"https://giphy.com/\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          GIPHY\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import PropTypes from \"prop-types\";\r\nexport const GridItem = ({title, url}) => {\r\n    return (\r\n        <li className=\"card\">\r\n            <img className=\"card__img\" src={url} alt={title} title={title}/>\r\n        </li>\r\n    );\r\n}\r\n\r\nGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}","export const getGifs = async (category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=20&api_key=66jxY7494rLDgFEi0zurjRPZTfCn7k2g`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import { GridItem } from \"../Components/GridItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useFetchGifs } from \"../../Hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ param }) => {\r\n\r\n  const { data: images, loading } = useFetchGifs(param);\r\n\r\n  return (\r\n      loading \r\n      ? <div className=\"spinner\"><div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div></div>\r\n      : <ul className=\"cards\">\r\n        { images.map(({ id, title, url }) => {\r\n          return <GridItem key={id} title={title} url={url} />;\r\n        })}\r\n      </ul>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  param: PropTypes.string.isRequired,\r\n};\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from \"../GifExpertApp/Helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });    \r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import { useState } from \"react\";\r\nimport { IoHomeSharp } from 'react-icons/io5';\r\n\r\nimport { AddCategory } from \"./Components/AddCategory\";\r\nimport { Footer } from \"./Components/Footer\";\r\nimport { GifGrid } from \"./Containers/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [query, setQuery] = useState(localStorage.getItem(\"query\") || \"\");\r\n\r\n  const emptyInput = () => {\r\n    setQuery( q => q = '' );\r\n    localStorage.setItem(\"query\", '');\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"introduce\">\r\n        <div className=\"introduce__group\">\r\n          <h1 className=\"introduce__title\">GifExpertApp</h1>\r\n          { !!query && <IoHomeSharp onClick={emptyInput}/> }\r\n        </div>\r\n        <AddCategory setQuery={setQuery} query={query} />\r\n      </div>\r\n      {query !== \"\" ? (\r\n        <div className=\"group\">\r\n          <GifGrid param={query} />\r\n        </div>\r\n      ) : (\r\n        <div className=\"empty\">\r\n          <p className=\"empty__text\">¿Tiene un gif en mente? ¡Búscalo!</p>\r\n        </div>\r\n      )}\r\n      <Footer/>\r\n    </main>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('main'));"],"sourceRoot":""}